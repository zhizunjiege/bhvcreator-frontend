// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "engine.proto" (package "cqsim.control", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SimController } from "./engine";
import type { ScenarioInfo } from "./engine";
import type { HttpInfo } from "./engine";
import type { LogLevelRequest } from "./engine";
import type { NodeJoinExitResponse } from "./engine";
import type { ErrMsgResponse } from "./engine";
import type { InitedResponse } from "./engine";
import type { NodeResponse } from "./engine";
import type { DataSysInfoResponse } from "./engine";
import type { SysInfoResponse } from "./engine";
import type { CommonRequest } from "./engine";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ControlCmd } from "./engine";
import type { CommonResponse } from "./engine";
import type { InitInfo } from "./engine";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { EntityListResponse } from "./engine";
import type { EntityListRequest } from "./engine";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * 仿真运行控制
 *
 * @generated from protobuf service cqsim.control.SimController
 */
export interface ISimControllerClient {
  /**
   * 获取想定中的实体列表 (用于节点设计)
   *
   * @generated from protobuf rpc: GetEntityList(cqsim.control.EntityListRequest) returns (cqsim.control.EntityListResponse);
   */
  getEntityList(
    input: EntityListRequest,
    options?: RpcOptions
  ): UnaryCall<EntityListRequest, EntityListResponse>;
  /**
   * 初始化
   *
   * @generated from protobuf rpc: Init(cqsim.control.InitInfo) returns (cqsim.control.CommonResponse);
   */
  init(
    input: InitInfo,
    options?: RpcOptions
  ): UnaryCall<InitInfo, CommonResponse>;
  /**
   * 发送控制指令
   *
   * @generated from protobuf rpc: Control(cqsim.control.ControlCmd) returns (cqsim.control.CommonResponse);
   */
  control(
    input: ControlCmd,
    options?: RpcOptions
  ): UnaryCall<ControlCmd, CommonResponse>;
  /**
   * 获取系统信息
   *
   * @generated from protobuf rpc: GetSysInfo(cqsim.control.CommonRequest) returns (stream cqsim.control.SysInfoResponse);
   */
  getSysInfo(
    input: CommonRequest,
    options?: RpcOptions
  ): ServerStreamingCall<CommonRequest, SysInfoResponse>;
  /**
   * 获取数据服务系统信息
   *
   * @generated from protobuf rpc: GetDataSysInfo(cqsim.control.CommonRequest) returns (stream cqsim.control.DataSysInfoResponse);
   */
  getDataSysInfo(
    input: CommonRequest,
    options?: RpcOptions
  ): ServerStreamingCall<CommonRequest, DataSysInfoResponse>;
  /**
   * 获取所有节点
   *
   * @generated from protobuf rpc: GetAllNode(cqsim.control.CommonRequest) returns (cqsim.control.NodeResponse);
   */
  getAllNode(
    input: CommonRequest,
    options?: RpcOptions
  ): UnaryCall<CommonRequest, NodeResponse>;
  /**
   * 获取分布式下初始化进度
   *
   * @generated from protobuf rpc: GetInitedPercent(cqsim.control.CommonRequest) returns (stream cqsim.control.InitedResponse);
   */
  getInitedPercent(
    input: CommonRequest,
    options?: RpcOptions
  ): ServerStreamingCall<CommonRequest, InitedResponse>;
  /**
   * 持续获取错误信息
   *
   * @generated from protobuf rpc: GetErrorMsg(cqsim.control.CommonRequest) returns (stream cqsim.control.ErrMsgResponse);
   */
  getErrorMsg(
    input: CommonRequest,
    options?: RpcOptions
  ): ServerStreamingCall<CommonRequest, ErrMsgResponse>;
  /**
   * 节点加入退出
   *
   * @generated from protobuf rpc: GetNodeJoinExit(cqsim.control.CommonRequest) returns (stream cqsim.control.NodeJoinExitResponse);
   */
  getNodeJoinExit(
    input: CommonRequest,
    options?: RpcOptions
  ): ServerStreamingCall<CommonRequest, NodeJoinExitResponse>;
  /**
   * 设置日志等级
   *
   * @generated from protobuf rpc: SetLogLevel(cqsim.control.LogLevelRequest) returns (cqsim.control.CommonResponse);
   */
  setLogLevel(
    input: LogLevelRequest,
    options?: RpcOptions
  ): UnaryCall<LogLevelRequest, CommonResponse>;
  /**
   * http相关设置
   *
   * @generated from protobuf rpc: SetHttpInfo(cqsim.control.HttpInfo) returns (cqsim.control.CommonResponse);
   */
  setHttpInfo(
    input: HttpInfo,
    options?: RpcOptions
  ): UnaryCall<HttpInfo, CommonResponse>;
  /**
   * 获取当前运行的想定信息
   *
   * @generated from protobuf rpc: GetScenarioInfo(cqsim.control.CommonRequest) returns (cqsim.control.ScenarioInfo);
   */
  getScenarioInfo(
    input: CommonRequest,
    options?: RpcOptions
  ): UnaryCall<CommonRequest, ScenarioInfo>;
  /**
   * 获取数据服务地址
   *
   * @generated from protobuf rpc: GetDataAddress(cqsim.control.CommonRequest) returns (cqsim.control.CommonResponse);
   */
  getDataAddress(
    input: CommonRequest,
    options?: RpcOptions
  ): UnaryCall<CommonRequest, CommonResponse>;
}
/**
 * 仿真运行控制
 *
 * @generated from protobuf service cqsim.control.SimController
 */
export class SimControllerClient implements ISimControllerClient, ServiceInfo {
  typeName = SimController.typeName;
  methods = SimController.methods;
  options = SimController.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * 获取想定中的实体列表 (用于节点设计)
   *
   * @generated from protobuf rpc: GetEntityList(cqsim.control.EntityListRequest) returns (cqsim.control.EntityListResponse);
   */
  getEntityList(
    input: EntityListRequest,
    options?: RpcOptions
  ): UnaryCall<EntityListRequest, EntityListResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<EntityListRequest, EntityListResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * 初始化
   *
   * @generated from protobuf rpc: Init(cqsim.control.InitInfo) returns (cqsim.control.CommonResponse);
   */
  init(
    input: InitInfo,
    options?: RpcOptions
  ): UnaryCall<InitInfo, CommonResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<InitInfo, CommonResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * 发送控制指令
   *
   * @generated from protobuf rpc: Control(cqsim.control.ControlCmd) returns (cqsim.control.CommonResponse);
   */
  control(
    input: ControlCmd,
    options?: RpcOptions
  ): UnaryCall<ControlCmd, CommonResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ControlCmd, CommonResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * 获取系统信息
   *
   * @generated from protobuf rpc: GetSysInfo(cqsim.control.CommonRequest) returns (stream cqsim.control.SysInfoResponse);
   */
  getSysInfo(
    input: CommonRequest,
    options?: RpcOptions
  ): ServerStreamingCall<CommonRequest, SysInfoResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, SysInfoResponse>(
      "serverStreaming",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * 获取数据服务系统信息
   *
   * @generated from protobuf rpc: GetDataSysInfo(cqsim.control.CommonRequest) returns (stream cqsim.control.DataSysInfoResponse);
   */
  getDataSysInfo(
    input: CommonRequest,
    options?: RpcOptions
  ): ServerStreamingCall<CommonRequest, DataSysInfoResponse> {
    const method = this.methods[4],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, DataSysInfoResponse>(
      "serverStreaming",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * 获取所有节点
   *
   * @generated from protobuf rpc: GetAllNode(cqsim.control.CommonRequest) returns (cqsim.control.NodeResponse);
   */
  getAllNode(
    input: CommonRequest,
    options?: RpcOptions
  ): UnaryCall<CommonRequest, NodeResponse> {
    const method = this.methods[5],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, NodeResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * 获取分布式下初始化进度
   *
   * @generated from protobuf rpc: GetInitedPercent(cqsim.control.CommonRequest) returns (stream cqsim.control.InitedResponse);
   */
  getInitedPercent(
    input: CommonRequest,
    options?: RpcOptions
  ): ServerStreamingCall<CommonRequest, InitedResponse> {
    const method = this.methods[6],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, InitedResponse>(
      "serverStreaming",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * 持续获取错误信息
   *
   * @generated from protobuf rpc: GetErrorMsg(cqsim.control.CommonRequest) returns (stream cqsim.control.ErrMsgResponse);
   */
  getErrorMsg(
    input: CommonRequest,
    options?: RpcOptions
  ): ServerStreamingCall<CommonRequest, ErrMsgResponse> {
    const method = this.methods[7],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, ErrMsgResponse>(
      "serverStreaming",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * 节点加入退出
   *
   * @generated from protobuf rpc: GetNodeJoinExit(cqsim.control.CommonRequest) returns (stream cqsim.control.NodeJoinExitResponse);
   */
  getNodeJoinExit(
    input: CommonRequest,
    options?: RpcOptions
  ): ServerStreamingCall<CommonRequest, NodeJoinExitResponse> {
    const method = this.methods[8],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, NodeJoinExitResponse>(
      "serverStreaming",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * 设置日志等级
   *
   * @generated from protobuf rpc: SetLogLevel(cqsim.control.LogLevelRequest) returns (cqsim.control.CommonResponse);
   */
  setLogLevel(
    input: LogLevelRequest,
    options?: RpcOptions
  ): UnaryCall<LogLevelRequest, CommonResponse> {
    const method = this.methods[9],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<LogLevelRequest, CommonResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * http相关设置
   *
   * @generated from protobuf rpc: SetHttpInfo(cqsim.control.HttpInfo) returns (cqsim.control.CommonResponse);
   */
  setHttpInfo(
    input: HttpInfo,
    options?: RpcOptions
  ): UnaryCall<HttpInfo, CommonResponse> {
    const method = this.methods[10],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<HttpInfo, CommonResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * 获取当前运行的想定信息
   *
   * @generated from protobuf rpc: GetScenarioInfo(cqsim.control.CommonRequest) returns (cqsim.control.ScenarioInfo);
   */
  getScenarioInfo(
    input: CommonRequest,
    options?: RpcOptions
  ): UnaryCall<CommonRequest, ScenarioInfo> {
    const method = this.methods[11],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, ScenarioInfo>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
  /**
   * 获取数据服务地址
   *
   * @generated from protobuf rpc: GetDataAddress(cqsim.control.CommonRequest) returns (cqsim.control.CommonResponse);
   */
  getDataAddress(
    input: CommonRequest,
    options?: RpcOptions
  ): UnaryCall<CommonRequest, CommonResponse> {
    const method = this.methods[12],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommonRequest, CommonResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input
    );
  }
}
