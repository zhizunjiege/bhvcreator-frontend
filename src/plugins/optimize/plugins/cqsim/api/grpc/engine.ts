// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "engine.proto" (package "cqsim.control", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "./google/protobuf/duration";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * 通用返回结果
 *
 * @generated from protobuf message cqsim.control.CommonResponse
 */
export interface CommonResponse {
  /**
   * 返回消息
   *
   * @generated from protobuf field: string msg = 1;
   */
  msg: string;
  /**
   * @generated from protobuf field: uint64 code = 2;
   */
  code: bigint;
  /**
   * @generated from protobuf field: uint64 error_location = 3;
   */
  errorLocation: bigint;
}
/**
 * 想定信息
 *
 * @generated from protobuf message cqsim.control.ScenarioInfo
 */
export interface ScenarioInfo {
  /**
   * 返回消息
   *
   * @generated from protobuf field: uint64 ID = 1 [json_name = "ID"];
   */
  iD: bigint;
}
/**
 * 日志等级请求
 *
 * @generated from protobuf message cqsim.control.LogLevelRequest
 */
export interface LogLevelRequest {
  /**
   * 日志等级
   *
   * @generated from protobuf field: repeated cqsim.control.LogLevel levels = 1;
   */
  levels: LogLevel[];
}
/**
 * 错误信息返回结果
 *
 * @generated from protobuf message cqsim.control.ErrMsgResponse
 */
export interface ErrMsgResponse {
  /**
   * 返回消息
   *
   * @generated from protobuf field: string msg = 1;
   */
  msg: string;
  /**
   * 等级
   *
   * @generated from protobuf field: cqsim.control.LogLevel level = 2;
   */
  level: LogLevel;
}
/**
 * @generated from protobuf message cqsim.control.CommonRequest
 */
export interface CommonRequest {}
/**
 * 节点加入退出
 *
 * @generated from protobuf message cqsim.control.NodeJoinExitResponse
 */
export interface NodeJoinExitResponse {
  /**
   * 节点地址
   *
   * @generated from protobuf field: string address = 1;
   */
  address: string;
  /**
   * 节点类型
   *
   * @generated from protobuf field: bool is_master_node = 2;
   */
  isMasterNode: boolean;
  /**
   * 加入/退出 true 加入 false 退出
   *
   * @generated from protobuf field: bool is_join = 3;
   */
  isJoin: boolean;
}
/**
 * 请求获得实体列表
 *
 * @generated from protobuf message cqsim.control.EntityListRequest
 */
export interface EntityListRequest {
  /**
   * 仿真任务ID
   *
   * @generated from protobuf field: uint64 task_id = 1;
   */
  taskId: bigint;
}
/**
 * 模型实体
 *
 * @generated from protobuf message cqsim.control.Entity
 */
export interface Entity {
  /**
   * 实体ID
   *
   * @generated from protobuf field: string id = 1;
   */
  id: string;
  /**
   * 模型类型ID
   *
   * @generated from protobuf field: string model_id = 2;
   */
  modelId: string;
}
/**
 * 返回实体列表
 *
 * @generated from protobuf message cqsim.control.EntityListResponse
 */
export interface EntityListResponse {
  /**
   * @generated from protobuf field: repeated cqsim.control.EntityListResponse.EntityInfo entity_list = 1;
   */
  entityList: EntityListResponse_EntityInfo[];
  /**
   * 实体列表信息json(web端使用)
   *
   * @generated from protobuf field: string entity_list_json = 2;
   */
  entityListJson: string;
}
/**
 * 实体列表信息
 *
 * @generated from protobuf message cqsim.control.EntityListResponse.EntityInfo
 */
export interface EntityListResponse_EntityInfo {
  /**
   * 实体ID
   *
   * @generated from protobuf field: string id = 1;
   */
  id: string;
  /**
   * 实体名称
   *
   * @generated from protobuf field: string name = 2;
   */
  name: string;
  /**
   * 模型显示名称
   *
   * @generated from protobuf field: string model_name = 3;
   */
  modelName: string;
  /**
   * 模型类型ID
   *
   * @generated from protobuf field: string model_id = 4;
   */
  modelId: string;
  /**
   * 阵营名称
   *
   * @generated from protobuf field: string camp_name = 5;
   */
  campName: string;
}
/**
 * 节点设计结果
 *
 * @generated from protobuf message cqsim.control.NodeDesign
 */
export interface NodeDesign {
  /**
   * 节点IP:PORT
   *
   * @generated from protobuf field: string address = 1;
   */
  address: string;
  /**
   * 节点挂载的模型实例
   *
   * @generated from protobuf field: repeated cqsim.control.Entity entities = 2;
   */
  entities: Entity[];
}
/**
 * 初始信息
 *
 * @generated from protobuf message cqsim.control.InitInfo
 */
export interface InitInfo {
  /**
   * @generated from protobuf oneof: init_info
   */
  initInfo:
    | {
        oneofKind: "oneSampleConfig";
        /**
         * 单样本仿真运行模式的设置
         *
         * @generated from protobuf field: cqsim.control.InitInfo.OneSample one_sample_config = 1;
         */
        oneSampleConfig: InitInfo_OneSample;
      }
    | {
        oneofKind: "multiSampleConfig";
        /**
         * 多样本仿真运行模式的设置
         *
         * @generated from protobuf field: cqsim.control.InitInfo.MultiSample multi_sample_config = 2;
         */
        multiSampleConfig: InitInfo_MultiSample;
      }
    | {
        oneofKind: "dataId";
        /**
         * (数据回放模式)仿真数据ID
         *
         * @generated from protobuf field: uint64 data_id = 3;
         */
        dataId: bigint;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * 单样本仿真运行模式
 *
 * @generated from protobuf message cqsim.control.InitInfo.OneSample
 */
export interface InitInfo_OneSample {
  /**
   * 仿真任务ID
   *
   * @generated from protobuf field: uint64 task_id = 1;
   */
  taskId: bigint;
  /**
   * (仅多节点情况)各节点的实体分配结果(节点设计结果)
   *
   * @generated from protobuf field: repeated cqsim.control.NodeDesign nodes = 2;
   */
  nodes: NodeDesign[];
}
/**
 * 多样本仿真运行模式
 *
 * @generated from protobuf message cqsim.control.InitInfo.MultiSample
 */
export interface InitInfo_MultiSample {
  /**
   * 试验设计ID
   *
   * @generated from protobuf field: uint64 exp_design_id = 1;
   */
  expDesignId: bigint;
  /**
   * (仅多节点情况)各节点的实体分配结果(节点设计结果)
   *
   * @generated from protobuf field: repeated cqsim.control.NodeDesign nodes = 2;
   */
  nodes: NodeDesign[];
}
/**
 * @generated from protobuf message cqsim.control.HttpInfo
 */
export interface HttpInfo {
  /**
   * @generated from protobuf field: string token = 1;
   */
  token: string;
}
/**
 * 仿真控制指令
 *
 * @generated from protobuf message cqsim.control.ControlCmd
 */
export interface ControlCmd {
  /**
   * @generated from protobuf oneof: cmd
   */
  cmd:
    | {
        oneofKind: "simStartTime";
        /**
         * 仿真开始时间(仅仿真运行模式)
         *
         * @generated from protobuf field: google.protobuf.Timestamp sim_start_time = 1;
         */
        simStartTime: Timestamp;
      }
    | {
        oneofKind: "simDuration";
        /**
         * 仿真持续时长(仅仿真运行模式)
         *
         * @generated from protobuf field: google.protobuf.Duration sim_duration = 2;
         */
        simDuration: Duration;
      }
    | {
        oneofKind: "runCmd";
        /**
         * 运行控制指令
         *
         * @generated from protobuf field: cqsim.control.ControlCmd.RunCmdType run_cmd = 3;
         */
        runCmd: ControlCmd_RunCmdType;
      }
    | {
        oneofKind: "timeStep";
        /**
         * 仿真步长(ms)(仅仿真运行模式)
         *
         * @generated from protobuf field: uint32 time_step = 4;
         */
        timeStep: number;
      }
    | {
        oneofKind: "speedRatio";
        /**
         * 倍速(speed_ratio<0.0为尽速模式)
         *
         * @generated from protobuf field: double speed_ratio = 5;
         */
        speedRatio: number;
      }
    | {
        oneofKind: "mode";
        /**
         * 工作模式
         *
         * @generated from protobuf field: cqsim.control.ControlCmd.Mode mode = 6;
         */
        mode: ControlCmd_Mode;
      }
    | {
        oneofKind: "scheduleVal";
        /**
         * 设置回放进度(仅回放模式) (0.00-100.00)
         *
         * @generated from protobuf field: double schedule_val = 7;
         */
        scheduleVal: number;
      }
    | {
        oneofKind: "backTrackTime";
        /**
         * 仿真回溯时间 绝对时间 ms
         *
         * @generated from protobuf field: int64 back_track_time = 8;
         */
        backTrackTime: bigint;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * 运行控制指令
 *
 * @generated from protobuf enum cqsim.control.ControlCmd.RunCmdType
 */
export enum ControlCmd_RunCmdType {
  /**
   * 开始
   *
   * @generated from protobuf enum value: START = 0;
   */
  START = 0,
  /**
   * 暂停
   *
   * @generated from protobuf enum value: SUSPEND = 1;
   */
  SUSPEND = 1,
  /**
   * 继续
   *
   * @generated from protobuf enum value: CONTINUE = 2;
   */
  CONTINUE = 2,
  /**
   * 停止
   *
   * @generated from protobuf enum value: STOP = 3;
   */
  STOP = 3,
  /**
   * 停止当前样本
   *
   * @generated from protobuf enum value: STOP_CURRENT_SAMPLE = 4;
   */
  STOP_CURRENT_SAMPLE = 4,
}
/**
 * @generated from protobuf enum cqsim.control.ControlCmd.Mode
 */
export enum ControlCmd_Mode {
  /**
   * 记录(默认推送态势数据)
   *
   * @generated from protobuf enum value: RECORD = 0;
   */
  RECORD = 0,
  /**
   * 回放(默认推送态势数据)
   *
   * @generated from protobuf enum value: REPLAY = 1;
   */
  REPLAY = 1,
  /**
   * 转换(只推送态势数据)
   *
   * @generated from protobuf enum value: CONVERSE = 2;
   */
  CONVERSE = 2,
}
/**
 * 引擎节点状态
 *
 * @generated from protobuf message cqsim.control.EngineNodeState
 */
export interface EngineNodeState {
  /**
   * 节点IP:PORT
   *
   * @generated from protobuf field: string address = 1;
   */
  address: string;
  /**
   * 节点状态
   *
   * @generated from protobuf field: cqsim.control.EngineNodeState.State state = 2;
   */
  state: EngineNodeState_State;
  /**
   * CPU占用率
   *
   * @generated from protobuf field: double cpu_load = 3;
   */
  cpuLoad: number;
  /**
   * 存储占用率
   *
   * @generated from protobuf field: double memory_load = 4;
   */
  memoryLoad: number;
  /**
   * 网络利用率
   *
   * @generated from protobuf field: double network_load = 5;
   */
  networkLoad: number;
  /**
   * 节点类型
   *
   * @generated from protobuf field: bool is_master_node = 6;
   */
  isMasterNode: boolean;
}
/**
 * 引擎节点状态分类
 *
 * @generated from protobuf enum cqsim.control.EngineNodeState.State
 */
export enum EngineNodeState_State {
  /**
   * 未初始化
   *
   * @generated from protobuf enum value: UNINITED = 0;
   */
  UNINITED = 0,
  /**
   * 初始化完成(想定和交互关系已给定)
   *
   * @generated from protobuf enum value: INITED = 1;
   */
  INITED = 1,
  /**
   * 正在运行(Start/Continue)
   *
   * @generated from protobuf enum value: RUNNING = 2;
   */
  RUNNING = 2,
  /**
   * 暂停(Suspend)
   *
   * @generated from protobuf enum value: SUSPENDED = 3;
   */
  SUSPENDED = 3,
  /**
   * 停止(Stop)
   *
   * @generated from protobuf enum value: STOPPED = 4;
   */
  STOPPED = 4,
  /**
   * 发生异常
   *
   * @generated from protobuf enum value: ERROR = 5;
   */
  ERROR = 5,
  /**
   * 离线
   *
   * @generated from protobuf enum value: OFFLINE = 6;
   */
  OFFLINE = 6,
}
/**
 * 系统信息
 *
 * @generated from protobuf message cqsim.control.SysInfoResponse
 */
export interface SysInfoResponse {
  /**
   * 当前仿真时间
   *
   * @generated from protobuf field: google.protobuf.Timestamp sim_current_time = 1;
   */
  simCurrentTime?: Timestamp;
  /**
   * 仿真时钟运行时长
   *
   * @generated from protobuf field: google.protobuf.Duration sim_duration = 2;
   */
  simDuration?: Duration;
  /**
   * 墙上时钟运行时长
   *
   * @generated from protobuf field: google.protobuf.Duration real_duration = 3;
   */
  realDuration?: Duration;
  /**
   * 仿真步长(ms)
   *
   * @generated from protobuf field: uint32 sim_time_step = 4;
   */
  simTimeStep: number;
  /**
   * 仿真倍速
   *
   * @generated from protobuf field: double speed_ratio = 5;
   */
  speedRatio: number;
  /**
   * 真实倍速
   *
   * @generated from protobuf field: double real_speed_ratio = 6;
   */
  realSpeedRatio: number;
  /**
   * 各节点的状态
   *
   * @generated from protobuf field: repeated cqsim.control.EngineNodeState node_state = 7;
   */
  nodeState: EngineNodeState[];
  /**
   * 当前样本数量
   *
   * @generated from protobuf field: uint32 current_sample_id = 8;
   */
  currentSampleId: number;
  /**
   * 参与仿真节点列表
   *
   * @generated from protobuf field: repeated string sim_address = 9;
   */
  simAddress: string[];
}
/**
 * 数据服务系统信息响应
 *
 * @generated from protobuf message cqsim.control.DataSysInfoResponse
 */
export interface DataSysInfoResponse {
  /**
   * 服务状态
   *
   * @generated from protobuf field: cqsim.control.DataSysInfoResponse.ServiceState state = 1;
   */
  state: DataSysInfoResponse_ServiceState;
  /**
   * 当前仿真时间
   *
   * @generated from protobuf field: google.protobuf.Timestamp current_time = 2;
   */
  currentTime?: Timestamp;
  /**
   * 仿真时钟运行时长
   *
   * @generated from protobuf field: google.protobuf.Duration duration = 3;
   */
  duration?: Duration;
  /**
   * 运行进度
   *
   * @generated from protobuf field: double schedule_val = 4;
   */
  scheduleVal: number;
  /**
   * CPU占用率
   *
   * @generated from protobuf field: double cpu_load = 5;
   */
  cpuLoad: number;
  /**
   * 存储占用率
   *
   * @generated from protobuf field: double memory_load = 6;
   */
  memoryLoad: number;
  /**
   * 网络利用率
   *
   * @generated from protobuf field: double network_load = 7;
   */
  networkLoad: number;
}
/**
 * 服务状态
 *
 * @generated from protobuf enum cqsim.control.DataSysInfoResponse.ServiceState
 */
export enum DataSysInfoResponse_ServiceState {
  /**
   * 未初始化
   *
   * @generated from protobuf enum value: UNINITED = 0;
   */
  UNINITED = 0,
  /**
   * 初始化完成
   *
   * @generated from protobuf enum value: INITED = 1;
   */
  INITED = 1,
  /**
   * 正在运行(Start/Continue)
   *
   * @generated from protobuf enum value: RUNNING = 2;
   */
  RUNNING = 2,
  /**
   * 暂停(Suspend)
   *
   * @generated from protobuf enum value: SUSPENDED = 3;
   */
  SUSPENDED = 3,
  /**
   * 停止(Stop)
   *
   * @generated from protobuf enum value: STOPPED = 4;
   */
  STOPPED = 4,
  /**
   * 发生异常
   *
   * @generated from protobuf enum value: ERROR = 5;
   */
  ERROR = 5,
  /**
   * 离线
   *
   * @generated from protobuf enum value: OFFLINE = 6;
   */
  OFFLINE = 6,
}
/**
 * 所有节点
 *
 * @generated from protobuf message cqsim.control.NodeResponse
 */
export interface NodeResponse {
  /**
   * 节点列表
   *
   * @generated from protobuf field: repeated string nodes = 1;
   */
  nodes: string[];
}
/**
 * 分布式下初始化进度
 *
 * @generated from protobuf message cqsim.control.InitedResponse
 */
export interface InitedResponse {
  /**
   * 初始化进度(百分比)
   *
   * @generated from protobuf field: uint32 init_percent = 1;
   */
  initPercent: number;
}
/**
 * 日志等级枚举
 *
 * @generated from protobuf enum cqsim.control.LogLevel
 */
export enum LogLevel {
  /**
   * @generated from protobuf enum value: TRACE = 0;
   */
  TRACE = 0,
  /**
   * @generated from protobuf enum value: DEBUG = 1;
   */
  DEBUG = 1,
  /**
   * @generated from protobuf enum value: INFO = 2;
   */
  INFO = 2,
  /**
   * @generated from protobuf enum value: WARN = 3;
   */
  WARN = 3,
  /**
   * @generated from protobuf enum value: ERROR = 4;
   */
  ERROR = 4,
  /**
   * @generated from protobuf enum value: CRITICAL_ERROR = 5;
   */
  CRITICAL_ERROR = 5,
}
// @generated message type with reflection information, may provide speed optimized methods
class CommonResponse$Type extends MessageType<CommonResponse> {
  constructor() {
    super("cqsim.control.CommonResponse", [
      { no: 1, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: "code",
        kind: "scalar",
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 3,
        name: "error_location",
        kind: "scalar",
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<CommonResponse>): CommonResponse {
    const message = { msg: "", code: 0n, errorLocation: 0n };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<CommonResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CommonResponse
  ): CommonResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string msg */ 1:
          message.msg = reader.string();
          break;
        case /* uint64 code */ 2:
          message.code = reader.uint64().toBigInt();
          break;
        case /* uint64 error_location */ 3:
          message.errorLocation = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CommonResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string msg = 1; */
    if (message.msg !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.msg);
    /* uint64 code = 2; */
    if (message.code !== 0n)
      writer.tag(2, WireType.Varint).uint64(message.code);
    /* uint64 error_location = 3; */
    if (message.errorLocation !== 0n)
      writer.tag(3, WireType.Varint).uint64(message.errorLocation);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.CommonResponse
 */
export const CommonResponse = new CommonResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenarioInfo$Type extends MessageType<ScenarioInfo> {
  constructor() {
    super("cqsim.control.ScenarioInfo", [
      {
        no: 1,
        name: "ID",
        kind: "scalar",
        jsonName: "ID",
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<ScenarioInfo>): ScenarioInfo {
    const message = { iD: 0n };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ScenarioInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ScenarioInfo
  ): ScenarioInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint64 ID = 1 [json_name = "ID"];*/ 1:
          message.iD = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ScenarioInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* uint64 ID = 1 [json_name = "ID"]; */
    if (message.iD !== 0n) writer.tag(1, WireType.Varint).uint64(message.iD);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.ScenarioInfo
 */
export const ScenarioInfo = new ScenarioInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogLevelRequest$Type extends MessageType<LogLevelRequest> {
  constructor() {
    super("cqsim.control.LogLevelRequest", [
      {
        no: 1,
        name: "levels",
        kind: "enum",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => ["cqsim.control.LogLevel", LogLevel],
      },
    ]);
  }
  create(value?: PartialMessage<LogLevelRequest>): LogLevelRequest {
    const message = { levels: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<LogLevelRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: LogLevelRequest
  ): LogLevelRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated cqsim.control.LogLevel levels */ 1:
          if (wireType === WireType.LengthDelimited)
            for (let e = reader.int32() + reader.pos; reader.pos < e; )
              message.levels.push(reader.int32());
          else message.levels.push(reader.int32());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: LogLevelRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated cqsim.control.LogLevel levels = 1; */
    if (message.levels.length) {
      writer.tag(1, WireType.LengthDelimited).fork();
      for (let i = 0; i < message.levels.length; i++)
        writer.int32(message.levels[i]);
      writer.join();
    }
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.LogLevelRequest
 */
export const LogLevelRequest = new LogLevelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ErrMsgResponse$Type extends MessageType<ErrMsgResponse> {
  constructor() {
    super("cqsim.control.ErrMsgResponse", [
      { no: 1, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: "level",
        kind: "enum",
        T: () => ["cqsim.control.LogLevel", LogLevel],
      },
    ]);
  }
  create(value?: PartialMessage<ErrMsgResponse>): ErrMsgResponse {
    const message = { msg: "", level: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ErrMsgResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ErrMsgResponse
  ): ErrMsgResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string msg */ 1:
          message.msg = reader.string();
          break;
        case /* cqsim.control.LogLevel level */ 2:
          message.level = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ErrMsgResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string msg = 1; */
    if (message.msg !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.msg);
    /* cqsim.control.LogLevel level = 2; */
    if (message.level !== 0)
      writer.tag(2, WireType.Varint).int32(message.level);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.ErrMsgResponse
 */
export const ErrMsgResponse = new ErrMsgResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonRequest$Type extends MessageType<CommonRequest> {
  constructor() {
    super("cqsim.control.CommonRequest", []);
  }
  create(value?: PartialMessage<CommonRequest>): CommonRequest {
    const message = {};
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<CommonRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CommonRequest
  ): CommonRequest {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CommonRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.CommonRequest
 */
export const CommonRequest = new CommonRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeJoinExitResponse$Type extends MessageType<NodeJoinExitResponse> {
  constructor() {
    super("cqsim.control.NodeJoinExitResponse", [
      { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: "is_master_node",
        kind: "scalar",
        T: 8 /*ScalarType.BOOL*/,
      },
      { no: 3, name: "is_join", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
    ]);
  }
  create(value?: PartialMessage<NodeJoinExitResponse>): NodeJoinExitResponse {
    const message = { address: "", isMasterNode: false, isJoin: false };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<NodeJoinExitResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: NodeJoinExitResponse
  ): NodeJoinExitResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string address */ 1:
          message.address = reader.string();
          break;
        case /* bool is_master_node */ 2:
          message.isMasterNode = reader.bool();
          break;
        case /* bool is_join */ 3:
          message.isJoin = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: NodeJoinExitResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string address = 1; */
    if (message.address !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.address);
    /* bool is_master_node = 2; */
    if (message.isMasterNode !== false)
      writer.tag(2, WireType.Varint).bool(message.isMasterNode);
    /* bool is_join = 3; */
    if (message.isJoin !== false)
      writer.tag(3, WireType.Varint).bool(message.isJoin);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.NodeJoinExitResponse
 */
export const NodeJoinExitResponse = new NodeJoinExitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityListRequest$Type extends MessageType<EntityListRequest> {
  constructor() {
    super("cqsim.control.EntityListRequest", [
      {
        no: 1,
        name: "task_id",
        kind: "scalar",
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<EntityListRequest>): EntityListRequest {
    const message = { taskId: 0n };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<EntityListRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: EntityListRequest
  ): EntityListRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint64 task_id */ 1:
          message.taskId = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: EntityListRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* uint64 task_id = 1; */
    if (message.taskId !== 0n)
      writer.tag(1, WireType.Varint).uint64(message.taskId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.EntityListRequest
 */
export const EntityListRequest = new EntityListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Entity$Type extends MessageType<Entity> {
  constructor() {
    super("cqsim.control.Entity", [
      { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "model_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<Entity>): Entity {
    const message = { id: "", modelId: "" };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<Entity>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Entity
  ): Entity {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string id */ 1:
          message.id = reader.string();
          break;
        case /* string model_id */ 2:
          message.modelId = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Entity,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string id = 1; */
    if (message.id !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.id);
    /* string model_id = 2; */
    if (message.modelId !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.modelId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.Entity
 */
export const Entity = new Entity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityListResponse$Type extends MessageType<EntityListResponse> {
  constructor() {
    super("cqsim.control.EntityListResponse", [
      {
        no: 1,
        name: "entity_list",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => EntityListResponse_EntityInfo,
      },
      {
        no: 2,
        name: "entity_list_json",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<EntityListResponse>): EntityListResponse {
    const message = { entityList: [], entityListJson: "" };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<EntityListResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: EntityListResponse
  ): EntityListResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated cqsim.control.EntityListResponse.EntityInfo entity_list */ 1:
          message.entityList.push(
            EntityListResponse_EntityInfo.internalBinaryRead(
              reader,
              reader.uint32(),
              options
            )
          );
          break;
        case /* string entity_list_json */ 2:
          message.entityListJson = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: EntityListResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated cqsim.control.EntityListResponse.EntityInfo entity_list = 1; */
    for (let i = 0; i < message.entityList.length; i++)
      EntityListResponse_EntityInfo.internalBinaryWrite(
        message.entityList[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* string entity_list_json = 2; */
    if (message.entityListJson !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.entityListJson);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.EntityListResponse
 */
export const EntityListResponse = new EntityListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityListResponse_EntityInfo$Type extends MessageType<EntityListResponse_EntityInfo> {
  constructor() {
    super("cqsim.control.EntityListResponse.EntityInfo", [
      { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: "model_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: "model_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 5, name: "camp_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(
    value?: PartialMessage<EntityListResponse_EntityInfo>
  ): EntityListResponse_EntityInfo {
    const message = {
      id: "",
      name: "",
      modelName: "",
      modelId: "",
      campName: "",
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<EntityListResponse_EntityInfo>(
        this,
        message,
        value
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: EntityListResponse_EntityInfo
  ): EntityListResponse_EntityInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string id */ 1:
          message.id = reader.string();
          break;
        case /* string name */ 2:
          message.name = reader.string();
          break;
        case /* string model_name */ 3:
          message.modelName = reader.string();
          break;
        case /* string model_id */ 4:
          message.modelId = reader.string();
          break;
        case /* string camp_name */ 5:
          message.campName = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: EntityListResponse_EntityInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string id = 1; */
    if (message.id !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.id);
    /* string name = 2; */
    if (message.name !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.name);
    /* string model_name = 3; */
    if (message.modelName !== "")
      writer.tag(3, WireType.LengthDelimited).string(message.modelName);
    /* string model_id = 4; */
    if (message.modelId !== "")
      writer.tag(4, WireType.LengthDelimited).string(message.modelId);
    /* string camp_name = 5; */
    if (message.campName !== "")
      writer.tag(5, WireType.LengthDelimited).string(message.campName);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.EntityListResponse.EntityInfo
 */
export const EntityListResponse_EntityInfo =
  new EntityListResponse_EntityInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeDesign$Type extends MessageType<NodeDesign> {
  constructor() {
    super("cqsim.control.NodeDesign", [
      { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: "entities",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => Entity,
      },
    ]);
  }
  create(value?: PartialMessage<NodeDesign>): NodeDesign {
    const message = { address: "", entities: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<NodeDesign>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: NodeDesign
  ): NodeDesign {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string address */ 1:
          message.address = reader.string();
          break;
        case /* repeated cqsim.control.Entity entities */ 2:
          message.entities.push(
            Entity.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: NodeDesign,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string address = 1; */
    if (message.address !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.address);
    /* repeated cqsim.control.Entity entities = 2; */
    for (let i = 0; i < message.entities.length; i++)
      Entity.internalBinaryWrite(
        message.entities[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.NodeDesign
 */
export const NodeDesign = new NodeDesign$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitInfo$Type extends MessageType<InitInfo> {
  constructor() {
    super("cqsim.control.InitInfo", [
      {
        no: 1,
        name: "one_sample_config",
        kind: "message",
        oneof: "initInfo",
        T: () => InitInfo_OneSample,
      },
      {
        no: 2,
        name: "multi_sample_config",
        kind: "message",
        oneof: "initInfo",
        T: () => InitInfo_MultiSample,
      },
      {
        no: 3,
        name: "data_id",
        kind: "scalar",
        oneof: "initInfo",
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<InitInfo>): InitInfo {
    const message = { initInfo: { oneofKind: undefined } };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<InitInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: InitInfo
  ): InitInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* cqsim.control.InitInfo.OneSample one_sample_config */ 1:
          message.initInfo = {
            oneofKind: "oneSampleConfig",
            oneSampleConfig: InitInfo_OneSample.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.initInfo as any).oneSampleConfig
            ),
          };
          break;
        case /* cqsim.control.InitInfo.MultiSample multi_sample_config */ 2:
          message.initInfo = {
            oneofKind: "multiSampleConfig",
            multiSampleConfig: InitInfo_MultiSample.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.initInfo as any).multiSampleConfig
            ),
          };
          break;
        case /* uint64 data_id */ 3:
          message.initInfo = {
            oneofKind: "dataId",
            dataId: reader.uint64().toBigInt(),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: InitInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* cqsim.control.InitInfo.OneSample one_sample_config = 1; */
    if (message.initInfo.oneofKind === "oneSampleConfig")
      InitInfo_OneSample.internalBinaryWrite(
        message.initInfo.oneSampleConfig,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* cqsim.control.InitInfo.MultiSample multi_sample_config = 2; */
    if (message.initInfo.oneofKind === "multiSampleConfig")
      InitInfo_MultiSample.internalBinaryWrite(
        message.initInfo.multiSampleConfig,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* uint64 data_id = 3; */
    if (message.initInfo.oneofKind === "dataId")
      writer.tag(3, WireType.Varint).uint64(message.initInfo.dataId);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.InitInfo
 */
export const InitInfo = new InitInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitInfo_OneSample$Type extends MessageType<InitInfo_OneSample> {
  constructor() {
    super("cqsim.control.InitInfo.OneSample", [
      {
        no: 1,
        name: "task_id",
        kind: "scalar",
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "nodes",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => NodeDesign,
      },
    ]);
  }
  create(value?: PartialMessage<InitInfo_OneSample>): InitInfo_OneSample {
    const message = { taskId: 0n, nodes: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<InitInfo_OneSample>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: InitInfo_OneSample
  ): InitInfo_OneSample {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint64 task_id */ 1:
          message.taskId = reader.uint64().toBigInt();
          break;
        case /* repeated cqsim.control.NodeDesign nodes */ 2:
          message.nodes.push(
            NodeDesign.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: InitInfo_OneSample,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* uint64 task_id = 1; */
    if (message.taskId !== 0n)
      writer.tag(1, WireType.Varint).uint64(message.taskId);
    /* repeated cqsim.control.NodeDesign nodes = 2; */
    for (let i = 0; i < message.nodes.length; i++)
      NodeDesign.internalBinaryWrite(
        message.nodes[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.InitInfo.OneSample
 */
export const InitInfo_OneSample = new InitInfo_OneSample$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitInfo_MultiSample$Type extends MessageType<InitInfo_MultiSample> {
  constructor() {
    super("cqsim.control.InitInfo.MultiSample", [
      {
        no: 1,
        name: "exp_design_id",
        kind: "scalar",
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      {
        no: 2,
        name: "nodes",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => NodeDesign,
      },
    ]);
  }
  create(value?: PartialMessage<InitInfo_MultiSample>): InitInfo_MultiSample {
    const message = { expDesignId: 0n, nodes: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<InitInfo_MultiSample>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: InitInfo_MultiSample
  ): InitInfo_MultiSample {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint64 exp_design_id */ 1:
          message.expDesignId = reader.uint64().toBigInt();
          break;
        case /* repeated cqsim.control.NodeDesign nodes */ 2:
          message.nodes.push(
            NodeDesign.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: InitInfo_MultiSample,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* uint64 exp_design_id = 1; */
    if (message.expDesignId !== 0n)
      writer.tag(1, WireType.Varint).uint64(message.expDesignId);
    /* repeated cqsim.control.NodeDesign nodes = 2; */
    for (let i = 0; i < message.nodes.length; i++)
      NodeDesign.internalBinaryWrite(
        message.nodes[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.InitInfo.MultiSample
 */
export const InitInfo_MultiSample = new InitInfo_MultiSample$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HttpInfo$Type extends MessageType<HttpInfo> {
  constructor() {
    super("cqsim.control.HttpInfo", [
      { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<HttpInfo>): HttpInfo {
    const message = { token: "" };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<HttpInfo>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: HttpInfo
  ): HttpInfo {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string token */ 1:
          message.token = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: HttpInfo,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string token = 1; */
    if (message.token !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.token);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.HttpInfo
 */
export const HttpInfo = new HttpInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ControlCmd$Type extends MessageType<ControlCmd> {
  constructor() {
    super("cqsim.control.ControlCmd", [
      {
        no: 1,
        name: "sim_start_time",
        kind: "message",
        oneof: "cmd",
        T: () => Timestamp,
      },
      {
        no: 2,
        name: "sim_duration",
        kind: "message",
        oneof: "cmd",
        T: () => Duration,
      },
      {
        no: 3,
        name: "run_cmd",
        kind: "enum",
        oneof: "cmd",
        T: () => ["cqsim.control.ControlCmd.RunCmdType", ControlCmd_RunCmdType],
      },
      {
        no: 4,
        name: "time_step",
        kind: "scalar",
        oneof: "cmd",
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "speed_ratio",
        kind: "scalar",
        oneof: "cmd",
        T: 1 /*ScalarType.DOUBLE*/,
      },
      {
        no: 6,
        name: "mode",
        kind: "enum",
        oneof: "cmd",
        T: () => ["cqsim.control.ControlCmd.Mode", ControlCmd_Mode],
      },
      {
        no: 7,
        name: "schedule_val",
        kind: "scalar",
        oneof: "cmd",
        T: 1 /*ScalarType.DOUBLE*/,
      },
      {
        no: 8,
        name: "back_track_time",
        kind: "scalar",
        oneof: "cmd",
        T: 3 /*ScalarType.INT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<ControlCmd>): ControlCmd {
    const message = { cmd: { oneofKind: undefined } };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<ControlCmd>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ControlCmd
  ): ControlCmd {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* google.protobuf.Timestamp sim_start_time */ 1:
          message.cmd = {
            oneofKind: "simStartTime",
            simStartTime: Timestamp.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.cmd as any).simStartTime
            ),
          };
          break;
        case /* google.protobuf.Duration sim_duration */ 2:
          message.cmd = {
            oneofKind: "simDuration",
            simDuration: Duration.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.cmd as any).simDuration
            ),
          };
          break;
        case /* cqsim.control.ControlCmd.RunCmdType run_cmd */ 3:
          message.cmd = {
            oneofKind: "runCmd",
            runCmd: reader.int32(),
          };
          break;
        case /* uint32 time_step */ 4:
          message.cmd = {
            oneofKind: "timeStep",
            timeStep: reader.uint32(),
          };
          break;
        case /* double speed_ratio */ 5:
          message.cmd = {
            oneofKind: "speedRatio",
            speedRatio: reader.double(),
          };
          break;
        case /* cqsim.control.ControlCmd.Mode mode */ 6:
          message.cmd = {
            oneofKind: "mode",
            mode: reader.int32(),
          };
          break;
        case /* double schedule_val */ 7:
          message.cmd = {
            oneofKind: "scheduleVal",
            scheduleVal: reader.double(),
          };
          break;
        case /* int64 back_track_time */ 8:
          message.cmd = {
            oneofKind: "backTrackTime",
            backTrackTime: reader.int64().toBigInt(),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ControlCmd,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* google.protobuf.Timestamp sim_start_time = 1; */
    if (message.cmd.oneofKind === "simStartTime")
      Timestamp.internalBinaryWrite(
        message.cmd.simStartTime,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* google.protobuf.Duration sim_duration = 2; */
    if (message.cmd.oneofKind === "simDuration")
      Duration.internalBinaryWrite(
        message.cmd.simDuration,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* cqsim.control.ControlCmd.RunCmdType run_cmd = 3; */
    if (message.cmd.oneofKind === "runCmd")
      writer.tag(3, WireType.Varint).int32(message.cmd.runCmd);
    /* uint32 time_step = 4; */
    if (message.cmd.oneofKind === "timeStep")
      writer.tag(4, WireType.Varint).uint32(message.cmd.timeStep);
    /* double speed_ratio = 5; */
    if (message.cmd.oneofKind === "speedRatio")
      writer.tag(5, WireType.Bit64).double(message.cmd.speedRatio);
    /* cqsim.control.ControlCmd.Mode mode = 6; */
    if (message.cmd.oneofKind === "mode")
      writer.tag(6, WireType.Varint).int32(message.cmd.mode);
    /* double schedule_val = 7; */
    if (message.cmd.oneofKind === "scheduleVal")
      writer.tag(7, WireType.Bit64).double(message.cmd.scheduleVal);
    /* int64 back_track_time = 8; */
    if (message.cmd.oneofKind === "backTrackTime")
      writer.tag(8, WireType.Varint).int64(message.cmd.backTrackTime);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.ControlCmd
 */
export const ControlCmd = new ControlCmd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EngineNodeState$Type extends MessageType<EngineNodeState> {
  constructor() {
    super("cqsim.control.EngineNodeState", [
      { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: "state",
        kind: "enum",
        T: () => ["cqsim.control.EngineNodeState.State", EngineNodeState_State],
      },
      { no: 3, name: "cpu_load", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
      {
        no: 4,
        name: "memory_load",
        kind: "scalar",
        T: 1 /*ScalarType.DOUBLE*/,
      },
      {
        no: 5,
        name: "network_load",
        kind: "scalar",
        T: 1 /*ScalarType.DOUBLE*/,
      },
      {
        no: 6,
        name: "is_master_node",
        kind: "scalar",
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<EngineNodeState>): EngineNodeState {
    const message = {
      address: "",
      state: 0,
      cpuLoad: 0,
      memoryLoad: 0,
      networkLoad: 0,
      isMasterNode: false,
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<EngineNodeState>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: EngineNodeState
  ): EngineNodeState {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string address */ 1:
          message.address = reader.string();
          break;
        case /* cqsim.control.EngineNodeState.State state */ 2:
          message.state = reader.int32();
          break;
        case /* double cpu_load */ 3:
          message.cpuLoad = reader.double();
          break;
        case /* double memory_load */ 4:
          message.memoryLoad = reader.double();
          break;
        case /* double network_load */ 5:
          message.networkLoad = reader.double();
          break;
        case /* bool is_master_node */ 6:
          message.isMasterNode = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: EngineNodeState,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* string address = 1; */
    if (message.address !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.address);
    /* cqsim.control.EngineNodeState.State state = 2; */
    if (message.state !== 0)
      writer.tag(2, WireType.Varint).int32(message.state);
    /* double cpu_load = 3; */
    if (message.cpuLoad !== 0)
      writer.tag(3, WireType.Bit64).double(message.cpuLoad);
    /* double memory_load = 4; */
    if (message.memoryLoad !== 0)
      writer.tag(4, WireType.Bit64).double(message.memoryLoad);
    /* double network_load = 5; */
    if (message.networkLoad !== 0)
      writer.tag(5, WireType.Bit64).double(message.networkLoad);
    /* bool is_master_node = 6; */
    if (message.isMasterNode !== false)
      writer.tag(6, WireType.Varint).bool(message.isMasterNode);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.EngineNodeState
 */
export const EngineNodeState = new EngineNodeState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SysInfoResponse$Type extends MessageType<SysInfoResponse> {
  constructor() {
    super("cqsim.control.SysInfoResponse", [
      { no: 1, name: "sim_current_time", kind: "message", T: () => Timestamp },
      { no: 2, name: "sim_duration", kind: "message", T: () => Duration },
      { no: 3, name: "real_duration", kind: "message", T: () => Duration },
      {
        no: 4,
        name: "sim_time_step",
        kind: "scalar",
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "speed_ratio",
        kind: "scalar",
        T: 1 /*ScalarType.DOUBLE*/,
      },
      {
        no: 6,
        name: "real_speed_ratio",
        kind: "scalar",
        T: 1 /*ScalarType.DOUBLE*/,
      },
      {
        no: 7,
        name: "node_state",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => EngineNodeState,
      },
      {
        no: 8,
        name: "current_sample_id",
        kind: "scalar",
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 9,
        name: "sim_address",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<SysInfoResponse>): SysInfoResponse {
    const message = {
      simTimeStep: 0,
      speedRatio: 0,
      realSpeedRatio: 0,
      nodeState: [],
      currentSampleId: 0,
      simAddress: [],
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<SysInfoResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SysInfoResponse
  ): SysInfoResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* google.protobuf.Timestamp sim_current_time */ 1:
          message.simCurrentTime = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.simCurrentTime
          );
          break;
        case /* google.protobuf.Duration sim_duration */ 2:
          message.simDuration = Duration.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.simDuration
          );
          break;
        case /* google.protobuf.Duration real_duration */ 3:
          message.realDuration = Duration.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.realDuration
          );
          break;
        case /* uint32 sim_time_step */ 4:
          message.simTimeStep = reader.uint32();
          break;
        case /* double speed_ratio */ 5:
          message.speedRatio = reader.double();
          break;
        case /* double real_speed_ratio */ 6:
          message.realSpeedRatio = reader.double();
          break;
        case /* repeated cqsim.control.EngineNodeState node_state */ 7:
          message.nodeState.push(
            EngineNodeState.internalBinaryRead(reader, reader.uint32(), options)
          );
          break;
        case /* uint32 current_sample_id */ 8:
          message.currentSampleId = reader.uint32();
          break;
        case /* repeated string sim_address */ 9:
          message.simAddress.push(reader.string());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: SysInfoResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* google.protobuf.Timestamp sim_current_time = 1; */
    if (message.simCurrentTime)
      Timestamp.internalBinaryWrite(
        message.simCurrentTime,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* google.protobuf.Duration sim_duration = 2; */
    if (message.simDuration)
      Duration.internalBinaryWrite(
        message.simDuration,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* google.protobuf.Duration real_duration = 3; */
    if (message.realDuration)
      Duration.internalBinaryWrite(
        message.realDuration,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* uint32 sim_time_step = 4; */
    if (message.simTimeStep !== 0)
      writer.tag(4, WireType.Varint).uint32(message.simTimeStep);
    /* double speed_ratio = 5; */
    if (message.speedRatio !== 0)
      writer.tag(5, WireType.Bit64).double(message.speedRatio);
    /* double real_speed_ratio = 6; */
    if (message.realSpeedRatio !== 0)
      writer.tag(6, WireType.Bit64).double(message.realSpeedRatio);
    /* repeated cqsim.control.EngineNodeState node_state = 7; */
    for (let i = 0; i < message.nodeState.length; i++)
      EngineNodeState.internalBinaryWrite(
        message.nodeState[i],
        writer.tag(7, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* uint32 current_sample_id = 8; */
    if (message.currentSampleId !== 0)
      writer.tag(8, WireType.Varint).uint32(message.currentSampleId);
    /* repeated string sim_address = 9; */
    for (let i = 0; i < message.simAddress.length; i++)
      writer.tag(9, WireType.LengthDelimited).string(message.simAddress[i]);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.SysInfoResponse
 */
export const SysInfoResponse = new SysInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DataSysInfoResponse$Type extends MessageType<DataSysInfoResponse> {
  constructor() {
    super("cqsim.control.DataSysInfoResponse", [
      {
        no: 1,
        name: "state",
        kind: "enum",
        T: () => [
          "cqsim.control.DataSysInfoResponse.ServiceState",
          DataSysInfoResponse_ServiceState,
        ],
      },
      { no: 2, name: "current_time", kind: "message", T: () => Timestamp },
      { no: 3, name: "duration", kind: "message", T: () => Duration },
      {
        no: 4,
        name: "schedule_val",
        kind: "scalar",
        T: 1 /*ScalarType.DOUBLE*/,
      },
      { no: 5, name: "cpu_load", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
      {
        no: 6,
        name: "memory_load",
        kind: "scalar",
        T: 1 /*ScalarType.DOUBLE*/,
      },
      {
        no: 7,
        name: "network_load",
        kind: "scalar",
        T: 1 /*ScalarType.DOUBLE*/,
      },
    ]);
  }
  create(value?: PartialMessage<DataSysInfoResponse>): DataSysInfoResponse {
    const message = {
      state: 0,
      scheduleVal: 0,
      cpuLoad: 0,
      memoryLoad: 0,
      networkLoad: 0,
    };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<DataSysInfoResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DataSysInfoResponse
  ): DataSysInfoResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* cqsim.control.DataSysInfoResponse.ServiceState state */ 1:
          message.state = reader.int32();
          break;
        case /* google.protobuf.Timestamp current_time */ 2:
          message.currentTime = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.currentTime
          );
          break;
        case /* google.protobuf.Duration duration */ 3:
          message.duration = Duration.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.duration
          );
          break;
        case /* double schedule_val */ 4:
          message.scheduleVal = reader.double();
          break;
        case /* double cpu_load */ 5:
          message.cpuLoad = reader.double();
          break;
        case /* double memory_load */ 6:
          message.memoryLoad = reader.double();
          break;
        case /* double network_load */ 7:
          message.networkLoad = reader.double();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: DataSysInfoResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* cqsim.control.DataSysInfoResponse.ServiceState state = 1; */
    if (message.state !== 0)
      writer.tag(1, WireType.Varint).int32(message.state);
    /* google.protobuf.Timestamp current_time = 2; */
    if (message.currentTime)
      Timestamp.internalBinaryWrite(
        message.currentTime,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* google.protobuf.Duration duration = 3; */
    if (message.duration)
      Duration.internalBinaryWrite(
        message.duration,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options
      ).join();
    /* double schedule_val = 4; */
    if (message.scheduleVal !== 0)
      writer.tag(4, WireType.Bit64).double(message.scheduleVal);
    /* double cpu_load = 5; */
    if (message.cpuLoad !== 0)
      writer.tag(5, WireType.Bit64).double(message.cpuLoad);
    /* double memory_load = 6; */
    if (message.memoryLoad !== 0)
      writer.tag(6, WireType.Bit64).double(message.memoryLoad);
    /* double network_load = 7; */
    if (message.networkLoad !== 0)
      writer.tag(7, WireType.Bit64).double(message.networkLoad);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.DataSysInfoResponse
 */
export const DataSysInfoResponse = new DataSysInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeResponse$Type extends MessageType<NodeResponse> {
  constructor() {
    super("cqsim.control.NodeResponse", [
      {
        no: 1,
        name: "nodes",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<NodeResponse>): NodeResponse {
    const message = { nodes: [] };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<NodeResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: NodeResponse
  ): NodeResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated string nodes */ 1:
          message.nodes.push(reader.string());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: NodeResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* repeated string nodes = 1; */
    for (let i = 0; i < message.nodes.length; i++)
      writer.tag(1, WireType.LengthDelimited).string(message.nodes[i]);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.NodeResponse
 */
export const NodeResponse = new NodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitedResponse$Type extends MessageType<InitedResponse> {
  constructor() {
    super("cqsim.control.InitedResponse", [
      {
        no: 1,
        name: "init_percent",
        kind: "scalar",
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<InitedResponse>): InitedResponse {
    const message = { initPercent: 0 };
    globalThis.Object.defineProperty(message, MESSAGE_TYPE, {
      enumerable: false,
      value: this,
    });
    if (value !== undefined)
      reflectionMergePartial<InitedResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: InitedResponse
  ): InitedResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint32 init_percent */ 1:
          message.initPercent = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: InitedResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions
  ): IBinaryWriter {
    /* uint32 init_percent = 1; */
    if (message.initPercent !== 0)
      writer.tag(1, WireType.Varint).uint32(message.initPercent);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message cqsim.control.InitedResponse
 */
export const InitedResponse = new InitedResponse$Type();
/**
 * @generated ServiceType for protobuf service cqsim.control.SimController
 */
export const SimController = new ServiceType("cqsim.control.SimController", [
  {
    name: "GetEntityList",
    options: {},
    I: EntityListRequest,
    O: EntityListResponse,
  },
  { name: "Init", options: {}, I: InitInfo, O: CommonResponse },
  { name: "Control", options: {}, I: ControlCmd, O: CommonResponse },
  {
    name: "GetSysInfo",
    serverStreaming: true,
    options: {},
    I: CommonRequest,
    O: SysInfoResponse,
  },
  {
    name: "GetDataSysInfo",
    serverStreaming: true,
    options: {},
    I: CommonRequest,
    O: DataSysInfoResponse,
  },
  { name: "GetAllNode", options: {}, I: CommonRequest, O: NodeResponse },
  {
    name: "GetInitedPercent",
    serverStreaming: true,
    options: {},
    I: CommonRequest,
    O: InitedResponse,
  },
  {
    name: "GetErrorMsg",
    serverStreaming: true,
    options: {},
    I: CommonRequest,
    O: ErrMsgResponse,
  },
  {
    name: "GetNodeJoinExit",
    serverStreaming: true,
    options: {},
    I: CommonRequest,
    O: NodeJoinExitResponse,
  },
  { name: "SetLogLevel", options: {}, I: LogLevelRequest, O: CommonResponse },
  { name: "SetHttpInfo", options: {}, I: HttpInfo, O: CommonResponse },
  { name: "GetScenarioInfo", options: {}, I: CommonRequest, O: ScenarioInfo },
  { name: "GetDataAddress", options: {}, I: CommonRequest, O: CommonResponse },
]);
